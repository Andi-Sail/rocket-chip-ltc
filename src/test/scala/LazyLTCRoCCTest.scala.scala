
import chisel3._
import chiseltest._
import org.scalatest.flatspec.AnyFlatSpec
import freechips.rocketchip.tile.{LTCUnit, HardSigmoid}
import org.scalatest.funsuite.AnyFunSuite

import  Array._
import scala.math._


// sigmoid test independed of HW implementation
class SigmoidLUTTest extends AnyFlatSpec with ChiselScalatestTester {
  behavior of "HardSigmoid" 
  it should "generate a correct fix16 error LUT" in {
    test(
      new HardSigmoid(w=32, f=16, lut_len=64, e_max = 0.001d)
      ) { c =>
        // expected LUTs generated with: python3 GenerateSigmoidErrorLut.py -e 0.001 -l 64
        println("Checking float LUT")
        val exp_lut_f = Array(0.0010005925532249327,0.0021021148079267693,0.003790392636376372,0.00617062256334977,0.009334883875490307,0.013361107375076675,0.018312545218169052,0.024237715439641816,0.031170772441911132,0.03913223867619231,0.048130023316321546,0.05816065055029662,0.06921062230309483,0.08125784655052926,0.09427307156895925,0.10822127722263686,0.11645593542287025,0.10619021802231565,0.09673036262980739,0.08803023084386197,0.08004326518759242,0.0727231691643383,0.06602446388935179,0.05990293145289649,0.05431595668277578,0.04922277962223387,0.04458467102699537,0.04036504269596963,0.03652950363942553,0.03304587208293419,0.029884152203961456,0.027016483374594058,0.024417068591147117,0.02206208774445828,0.019929600444932527,0.017999442274758026,0.016253117599438482,0.01467369142978614,0.013245682278227089,0.01195495749193276,0.010788632161183087,0.009734972385344376,0.00878330342197875,0.00792392303848044,0.007148020222508711,0.006447599280415384,0.005815409255733539,0.005244878527262631,0.0047300543937942585,0.004265547416167803,0.0038464802638715767,0.0034684408000698053,0.0031274391334890073,0.002819868366183864,0.0025424687713085925,0.002292295143434653,0.0020666870747003685,0.0018632419223676422,0.001679790246612023,0.0015143735110786372,0.0013652238525734273,0.0012307457399202137,0.0011094993553308896,0.0010001855444389252)
        val act_lut_f = c.error_lut_d
        for ( i <- 0 until 64)
        {
          assert(exp_lut_f(i) == act_lut_f(i), s"error float lut missmatch $i")
        }

        val exp_lut_fix = Array(66,138,248,404,612,876,1200,1588,2043,2565,3154,3812,4536,5325,6178,7092,7632,6959,6339,5769,5246,4766,4327,3926,3560,3226,2922,2645,2394,2166,1958,1771,1600,1446,1306,1180,1065,962,868,783,707,638,576,519,468,423,381,344,310,280,252,227,205,185,167,150,135,122,110,99,89,81,73,66)
        val act_lut_fix = c.error_lut_quant
        println("Checking fix16 LUT")
        for ( i <- 0 until 64)
        {
          // round to four digits, due to double <-> float difference
          assert(exp_lut_fix(i) == act_lut_fix(i), s"error fix lut missmatch $i")
        }
    }
  }
  it should "generate a correct fix8 error LUT" in {
    test(
      new HardSigmoid(w=16, f=8, lut_len=128, e_max = 0.01d)
      ) { c =>
        // expected LUTs generated with: python3 GenerateSigmoidErrorLut.py -e 0.01 -l 128
        println("Checking float LUT")
        val exp_lut_f = Array(0.010000563589451339,0.011114056479796575,0.012301670426764888,0.013564873792792032,0.014905033147793456,0.01632341353257627,0.017821178965055307,0.019399393179077684,0.021059020585002752,0.02280092744062734,0.024625883220577238,0.026534562171910414,0.028527545043388502,0.03060532097567359,0.03276828953958766,0.035016762909528154,0.03735096815917549,0.03977104966671963,0.042277071617015216,0.044869020588288566,0.047546808211314184,0.050310273889298096,0.053159187567090815,0.05609325253875386,0.05911210828295754,0.062215333316156696,0.06540244805398499,0.06867291767182693,0.0720261549560457,0.07546152313788879,0.07897833870262705,0.08257587416702894,0.0862533608188083,0.09000999141222232,0.09384492281451606,0.09775727859843075,0.10174615157649425,0.10581060627329486,0.10994968133241512,0.11416239185515153,0.11844773166858169,0.11663681856678754,0.11359259598797367,0.11061787811675672,0.10771159488801785,0.10487266518521898,0.10209999865490904,0.09939249744384415,0.09674905785898147,0.09416857195083772,0.09164992902093538,0.08919201705424773,0.08679372407773922,0.08445393944626212,0.0821715550572083,0.0799454664954451,0.07777457411017741,0.07565778402546741,0.07359400908623137,0.07158216974159504,0.06962119486754725,0.06771002253087244,0.0658476006963774,0.06403288787944428,0.062264853745962356,0.0605424796616848,0.05886475919306422,0.057230698561598015,0.05563931705370706,0.05408964738814137,0.05258073604288094,0.05111164354346698,0.04968144471465841,0.048289228897274716,0.04693410013203547,0.04561517731216447,0.04433159430647926,0.04308250005463421,0.04186705863613405,0.040684449314686955,0.039533866559406605,0.038414520044322775,0.03732563462760874,0.03626645031187248,0.03523622218681477,0.03423422035549517,0.03325972984540049,0.032312050505456935,0.03139049689007456,0.0304943981312642,0.029623097799819087,0.02877595375650166,0.027952337994135656,0.027151636471452134,0.026373248939495997,0.02561658876136097,0.024881082725973225,0.024166170856608216,0.023471306214783882,0.022795954700141174,0.022139594846880106,0.021501717617290583,0.020881826192882813,0.020279435763589815,0.019694073315483895,0.019125277417422093,0.018572598007005947,0.018035596176214863,0.01751384395704847,0.017006924107487276,0.0165144298980604,0.01603596489928527,0.01557114277022531,0.015119587048391336,0.014680930941194714,0.014254817119139007,0.013840897510929207,0.013438833100648973,0.013048293727155658,0.01266895788581579,0.012300512532702146,0.011942652891351324,0.011595082262178424,0.011257511834622647,0.0109296605021042,0.010611254679843696,0.01030202812560399,0.010001721763392868)
        val act_lut_f = c.error_lut_d
        for ( i <- 0 until 64)
        {
          assert(exp_lut_f(i) == act_lut_f(i), s"error float lut missmatch $i")
        }

        val exp_lut_fix = Array(3,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,10,10,11,11,12,13,14,14,15,16,17,18,18,19,20,21,22,23,24,25,26,27,28,29,30,30,29,28,28,27,26,25,25,24,23,23,22,22,21,20,20,19,19,18,18,17,17,16,16,15,15,15,14,14,13,13,13,12,12,12,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,7,6,6,6,6,6,6,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3)
        val act_lut_fix = c.error_lut_quant
        println("Checking fix8 LUT")
        for ( i <- 0 until 64)
        {
          // round to four digits, due to double <-> float difference
          assert(exp_lut_fix(i) == act_lut_fix(i), s"error fix lut missmatch $i")
        }
    }
  }

}


class BasicTest extends AnyFlatSpec with ChiselScalatestTester {
  behavior of "LTCUnit"
  // test class body here
  it should "do something" in {
    // test case body here
    test(new LTCUnit) { c =>
    // test body here
      c.io.in.poke(0.U)
      c.clock.step()
      c.io.out.expect(0.U)
      c.io.in.poke(42.U)
      c.clock.step()
      c.io.out.expect(42.U)
      println("Last output value :" + c.io.out.peek().litValue)
    }
  }
}